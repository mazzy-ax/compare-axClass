Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: JOB

; Microsoft Dynamics AX Job: Compare_Ax6Class unloaded
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #Compare_Ax6Class
    #// mazzy@mazzy.ru, 2017-10-12, https://github.com/mazzy-ax/compare-axClass
    #static void Compare_Ax6Class(Args _args)
    #{
    #    #File
    #    #WinApi
    #    #define.xmlTrue('true')
    #    #define.xmlFalse('')
    #    #define.xmlFalseText('false')
    #
    #    // XML - is case sensive
    #    #define.parm_OutputDirectory('outputDirectory')
    #    #define.parm_ShowOverriddenMethods('showOverriddenMethods')
    #    #define.parm_RemoveXmlComments('removeXmlComments')
    #    #define.parm_RemoveIndent('removeIndent')
    #    #define.parm_removeAllOutputFiles('removeAllOutputFiles')
    #    #define.parm_removeOutputFile('removeOutputFile')
    #
    #    FilePath    baseDir = @'E:\Compare-axClass';
    #    Filename    taskFileName = @'compare-axClass.xml';
    #    XMLDocument task;
    #
    #    XmlNode     parameters;
    #    XmlNode     files;
    #    XmlNodeList fileList;
    #    XmlNode     file;
    #    Filename    fileName;
    #
    #    XmlNodeList classes;
    #    str         className;
    #
    #    int i,j;
    #
    #    TextBuffer  text;
    #
    #    Set             classNames;
    #    Set             methods;
    #    SetEnumerator   se;
    #
    #    SysDictClass    dc;
    #    SysDictMethod   dm;
    #
    #    Map             mm;
    #    MapEnumerator   me;
    #
    #    System.Text.RegularExpressions.Regex removeXmlCommentsRegex = new System.Text.RegularExpressions.Regex('(?m)^\s*///.*\n');
    #    System.Text.RegularExpressions.Regex removeIndentRegex = new System.Text.RegularExpressions.Regex('(?m)^( {4}|\t)');
    #
    #    // add trail delimiter if need it
    #    str arrangeDirectory(str directory)
    #    {
    #        if( directory && !strEndsWith(directory, #FilePathDelimiter) )
    #        {
    #            return directory + #FilePathDelimiter;
    #        }
    #        return directory;
    #    }
    #
    #    // find a parameter in a node
    #    XmlNode getParameter(str paramName, XmlNode node, XmlNode node2 = null)
    #    {
    #        XmlNode nodeParam;
    #        str xPath = strFmt('ax6/%1 | %1', paramName);
    #        ;
    #        Debug::assert(node != null);
    #        Debug::assert(paramName != '');
    #
    #        nodeParam = node.selectSingleNode(xPath);
    #        if( node2 && !nodeParam )
    #        {
    #            nodeParam = node2.selectSingleNode(xPath);
    #        }
    #
    #        return nodeParam;
    #    }
    #
    #    str getParameterStr(str paramName, XmlNode node, XmlNode node2 = null)
    #    {
    #        XmlNode nodeParam = getParameter(paramName, node, node2);
    #        if ( nodeParam )
    #        {
    #            return nodeParam.innerText();
    #        }
    #        return '';
    #    }
    #
    #    boolean getParameterBool(str paramName, XmlNode node, XmlNode node2 = null)
    #    {
    #        XmlNode nodeParam = getParameter(paramName, node, node2);
    #        return nodeParam && (nodeParam.innerText() != 'false');
    #    }
    #
    #    // get set of method names from set of SysDictMethod. Powershell> methods | select-object -property names
    #    Set getMethodNames(Set _methods, XmlNode node, XmlNode node2 = null)
    #    {
    #        Set _names = new Set(Types::String);
    #        SetEnumerator _se = _methods.getEnumerator();
    #        SysDictMethod _dm;
    #
    #        if( !getParameterBool(#parm_ShowOverriddenMethods, node, node2) )
    #        {
    #            while( _se.moveNext() )
    #            {
    #                _dm = _se.current();
    #                _names.add(_dm.name());
    #            }
    #        }
    #        return _names;
    #    }
    #
    #    // transform Source of Method relate parameters - remove indents, remove XML comments, trim and etc.
    #    str transformSource(str source, XmlNode _file, XmlNode _parameters)
    #    {
    #        if( getParameterBool(#parm_removeXmlComments, _file, _parameters) )
    #        {
    #            source = removeXmlCommentsRegex.Replace(source, '');
    #        }
    #
    #        if( getParameterBool(#parm_removeIndent, _file, _parameters) )
    #        {
    #            source = removeIndentRegex.Replace(Source, '');
    #        }
    #
    #        source = strrtrim(strLTrim(Source));
    #        return Source;
    #    }
    #
    #    //////////////////////////////////////////////////////////////////////////////
    #    setPrefix(funcName());
    #
    #    baseDir = arrangeDirectory(baseDir);
    #    task = XmlDocument::newFile(baseDir + taskFileName);
    #    parameters = task.selectSingleNode('diffAxClassMethod/parameters');
    #    files = task.selectSingleNode('diffAxClassMethod/files');
    #    fileList = files.selectNodes('file');
    #
    #    if( getParameterBool(#parm_removeAllOutputFiles, parameters) )
    #    {
    #        fileName = baseDir + getParameterStr(#parm_OutputDirectory, parameters);
    #        WinApi::shellExecute("cmd", "/c DEL *.txt", fileName, #ShellExeOpen, #SW_HIDE, true);
    #        info(strFmt("%1\*.txt deleted.", filename));
    #    }
    #
    #    for(i=0; i<fileList.length(); ++i)
    #    {
    #        // get File name
    #        file = fileList.item(i);
    #        fileName = file.getNamedElement('name').innerText();
    #        if( !fileName )
    #        {
    #            warning(strFmt("#%1: File name was not found. skipped.", i));
    #            continue;
    #        }
    #
    #        fileName = baseDir + getParameterStr(#parm_OutputDirectory, file, parameters) + fileName + '.txt';
    #        setPrefix(strFmt("#%1, %2",i+1, fileName));
    #
    #        if( getParameterBool(#parm_removeOutputFile, file, parameters) )
    #        {
    #            WinApi::deleteFile(fileName);
    #        }
    #
    #        // get methods of classes
    #        classes = file.selectNodes('ax6/class | class');
    #        if( !classes.length() )
    #        {
    #            classes = file.selectNodes('name');
    #        }
    #
    #        classNames = new Set(Types::String);
    #        methods = new Set(Types::Class);
    #
    #        for(j=0; j<classes.length(); ++j)
    #        {
    #            className = classes.item(j).innerText();
    #            if( classNames.in(className) )
    #            {
    #                continue;
    #            }
    #            classNames.add(className);
    #
    #            dc = new SysDictClass(className2Id(className));
    #            if( !dc )
    #            {
    #                info(strFmt("A class %3 was not found. The class skipped", className));
    #                continue;
    #            }
    #
    #            methods = Set::union(methods, dc.methodsRecursive(true, true, false, className, getMethodNames(methods, file, parameters), true));
    #        }
    #
    #        // sort methods of classes
    #        se = methods.getEnumerator();
    #        mm = new Map(Types::String, Types::String);
    #        while( se.moveNext() )
    #        {
    #            dm = se.current();
    #            mm.insert(
    #                strFmt("\n### method: %1 ### class: %2\n\n", dm.name(), dm.parentName()),
    #                transformSource(dm.getSource(), file, parameters)
    #            );
    #        }
    #
    #        // transform sources of methods and add it to a text buffer
    #        text = new TextBuffer();
    #        me = mm.getEnumerator();
    #        while( me.moveNext() )
    #        {
    #            text.appendText(me.currentKey());
    #            text.appendText(me.currentValue());
    #            text.appendText('\n\n\n');
    #        }
    #
    #        // write the text buffer to a file
    #        if( text.toFile(fileName, FileEncoding::UTF8) )
    #        {
    #            info("Done.");
    #        }
    #        else
    #        {
    #            error("Write error.");
    #        }
    #    }
    #
    #}
  ENDSOURCE
  PROPERTIES
    Origin              #{97BEFEEA-BD6E-4B4F-81A1-1BE4A0F7CF5D}
  ENDPROPERTIES
  

***Element: END
